/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DSTokenBaseInterface extends Interface {
  functions: {
    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    balanceOf: TypedFunctionDescription<{ encode([src]: [string]): string }>;

    allowance: TypedFunctionDescription<{
      encode([src, guy]: [string, string]): string;
    }>;

    transfer: TypedFunctionDescription<{
      encode([dst, wad]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([src, dst, wad]: [string, string, BigNumberish]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([guy, wad]: [string, BigNumberish]): string;
    }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class DSTokenBase extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DSTokenBase;
  attach(addressOrName: string): DSTokenBase;
  deployed(): Promise<DSTokenBase>;

  on(event: EventFilter | string, listener: Listener): DSTokenBase;
  once(event: EventFilter | string, listener: Listener): DSTokenBase;
  addListener(eventName: EventFilter | string, listener: Listener): DSTokenBase;
  removeAllListeners(eventName: EventFilter | string): DSTokenBase;
  removeListener(eventName: any, listener: Listener): DSTokenBase;

  interface: DSTokenBaseInterface;

  functions: {
    totalSupply(): Promise<BigNumber>;

    balanceOf(src: string): Promise<BigNumber>;

    allowance(src: string, guy: string): Promise<BigNumber>;

    transfer(
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    approve(
      guy: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  totalSupply(): Promise<BigNumber>;

  balanceOf(src: string): Promise<BigNumber>;

  allowance(src: string, guy: string): Promise<BigNumber>;

  transfer(
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    src: string,
    dst: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  approve(
    guy: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    totalSupply(): Promise<BigNumber>;

    balanceOf(src: string): Promise<BigNumber>;

    allowance(src: string, guy: string): Promise<BigNumber>;

    transfer(dst: string, wad: BigNumberish): Promise<BigNumber>;

    transferFrom(
      src: string,
      dst: string,
      wad: BigNumberish
    ): Promise<BigNumber>;

    approve(guy: string, wad: BigNumberish): Promise<BigNumber>;
  };
}
