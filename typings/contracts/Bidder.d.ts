/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface BidderInterface extends Interface {
  functions: {
    auctionID: TypedFunctionDescription<{ encode([]: []): string }>;

    bidSubmited: TypedFunctionDescription<{ encode([]: []): string }>;

    expectedLot: TypedFunctionDescription<{ encode([]: []): string }>;

    getAuctionInformation: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentBid: TypedFunctionDescription<{
      encode([auctionID]: [BigNumberish]): string;
    }>;

    getDaiAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getFlopperAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getMKRAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getTotalNumberOfAuctions: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    isEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    submitBid: TypedFunctionDescription<{ encode([]: []): string }>;

    finalize: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {};
}

export class Bidder extends Contract {
  connect(signerOrProvider: Signer | Provider | string): Bidder;
  attach(addressOrName: string): Bidder;
  deployed(): Promise<Bidder>;

  on(event: EventFilter | string, listener: Listener): Bidder;
  once(event: EventFilter | string, listener: Listener): Bidder;
  addListener(eventName: EventFilter | string, listener: Listener): Bidder;
  removeAllListeners(eventName: EventFilter | string): Bidder;
  removeListener(eventName: any, listener: Listener): Bidder;

  interface: BidderInterface;

  functions: {
    auctionID(): Promise<BigNumber>;

    bidSubmited(): Promise<boolean>;

    expectedLot(): Promise<BigNumber>;

    getAuctionInformation(): Promise<{
      bidIncrement: BigNumber;
      repriceIncrement: BigNumber;
      bidDuration: BigNumber;
      auctionDuration: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getCurrentBid(
      auctionID: BigNumberish
    ): Promise<{
      amountDAI: BigNumber;
      amountMKR: BigNumber;
      bidder: string;
      bidDeadline: number;
      auctionDeadline: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    getDaiAddress(): Promise<string>;

    getFlopperAddress(): Promise<string>;

    getMKRAddress(): Promise<string>;

    getTotalNumberOfAuctions(): Promise<BigNumber>;

    isEnabled(): Promise<boolean>;

    owner(): Promise<string>;

    submitBid(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    finalize(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  auctionID(): Promise<BigNumber>;

  bidSubmited(): Promise<boolean>;

  expectedLot(): Promise<BigNumber>;

  getAuctionInformation(): Promise<{
    bidIncrement: BigNumber;
    repriceIncrement: BigNumber;
    bidDuration: BigNumber;
    auctionDuration: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getCurrentBid(
    auctionID: BigNumberish
  ): Promise<{
    amountDAI: BigNumber;
    amountMKR: BigNumber;
    bidder: string;
    bidDeadline: number;
    auctionDeadline: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  getDaiAddress(): Promise<string>;

  getFlopperAddress(): Promise<string>;

  getMKRAddress(): Promise<string>;

  getTotalNumberOfAuctions(): Promise<BigNumber>;

  isEnabled(): Promise<boolean>;

  owner(): Promise<string>;

  submitBid(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  finalize(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    auctionID(): Promise<BigNumber>;

    bidSubmited(): Promise<BigNumber>;

    expectedLot(): Promise<BigNumber>;

    getAuctionInformation(): Promise<BigNumber>;

    getCurrentBid(auctionID: BigNumberish): Promise<BigNumber>;

    getDaiAddress(): Promise<BigNumber>;

    getFlopperAddress(): Promise<BigNumber>;

    getMKRAddress(): Promise<BigNumber>;

    getTotalNumberOfAuctions(): Promise<BigNumber>;

    isEnabled(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    submitBid(): Promise<BigNumber>;

    finalize(): Promise<BigNumber>;
  };
}
