/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface ETHJoinInterface extends Interface {
  functions: {
    ilk: TypedFunctionDescription<{ encode([]: []): string }>;

    live: TypedFunctionDescription<{ encode([]: []): string }>;

    vat: TypedFunctionDescription<{ encode([]: []): string }>;

    wards: TypedFunctionDescription<{ encode([]: [string]): string }>;

    rely: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    deny: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    cage: TypedFunctionDescription<{ encode([]: []): string }>;

    join: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    exit: TypedFunctionDescription<{
      encode([usr, wad]: [string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class ETHJoin extends Contract {
  connect(signerOrProvider: Signer | Provider | string): ETHJoin;
  attach(addressOrName: string): ETHJoin;
  deployed(): Promise<ETHJoin>;

  on(event: EventFilter | string, listener: Listener): ETHJoin;
  once(event: EventFilter | string, listener: Listener): ETHJoin;
  addListener(eventName: EventFilter | string, listener: Listener): ETHJoin;
  removeAllListeners(eventName: EventFilter | string): ETHJoin;
  removeListener(eventName: any, listener: Listener): ETHJoin;

  interface: ETHJoinInterface;

  functions: {
    ilk(): Promise<string>;

    live(): Promise<BigNumber>;

    vat(): Promise<string>;

    wards(arg0: string): Promise<BigNumber>;

    rely(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deny(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    cage(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    join(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    exit(
      usr: string,
      wad: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  ilk(): Promise<string>;

  live(): Promise<BigNumber>;

  vat(): Promise<string>;

  wards(arg0: string): Promise<BigNumber>;

  rely(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deny(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  cage(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  join(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  exit(
    usr: string,
    wad: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    ilk(): Promise<BigNumber>;

    live(): Promise<BigNumber>;

    vat(): Promise<BigNumber>;

    wards(arg0: string): Promise<BigNumber>;

    rely(usr: string): Promise<BigNumber>;

    deny(usr: string): Promise<BigNumber>;

    cage(): Promise<BigNumber>;

    join(usr: string): Promise<BigNumber>;

    exit(usr: string, wad: BigNumberish): Promise<BigNumber>;
  };
}
