/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DSStopInterface extends Interface {
  functions: {
    authority: TypedFunctionDescription<{ encode([]: []): string }>;

    owner: TypedFunctionDescription<{ encode([]: []): string }>;

    setAuthority: TypedFunctionDescription<{
      encode([authority_]: [string]): string;
    }>;

    setOwner: TypedFunctionDescription<{ encode([owner_]: [string]): string }>;

    stopped: TypedFunctionDescription<{ encode([]: []): string }>;

    stop: TypedFunctionDescription<{ encode([]: []): string }>;

    start: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    LogSetAuthority: TypedEventDescription<{
      encodeTopics([authority]: [string | null]): string[];
    }>;

    LogSetOwner: TypedEventDescription<{
      encodeTopics([owner]: [string | null]): string[];
    }>;
  };
}

export class DSStop extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DSStop;
  attach(addressOrName: string): DSStop;
  deployed(): Promise<DSStop>;

  on(event: EventFilter | string, listener: Listener): DSStop;
  once(event: EventFilter | string, listener: Listener): DSStop;
  addListener(eventName: EventFilter | string, listener: Listener): DSStop;
  removeAllListeners(eventName: EventFilter | string): DSStop;
  removeListener(eventName: any, listener: Listener): DSStop;

  interface: DSStopInterface;

  functions: {
    authority(): Promise<string>;

    owner(): Promise<string>;

    setAuthority(
      authority_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    setOwner(
      owner_: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    stopped(): Promise<boolean>;

    stop(overrides?: TransactionOverrides): Promise<ContractTransaction>;

    start(overrides?: TransactionOverrides): Promise<ContractTransaction>;
  };

  authority(): Promise<string>;

  owner(): Promise<string>;

  setAuthority(
    authority_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  setOwner(
    owner_: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  stopped(): Promise<boolean>;

  stop(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  start(overrides?: TransactionOverrides): Promise<ContractTransaction>;

  filters: {
    LogSetAuthority(authority: string | null): EventFilter;

    LogSetOwner(owner: string | null): EventFilter;
  };

  estimate: {
    authority(): Promise<BigNumber>;

    owner(): Promise<BigNumber>;

    setAuthority(authority_: string): Promise<BigNumber>;

    setOwner(owner_: string): Promise<BigNumber>;

    stopped(): Promise<BigNumber>;

    stop(): Promise<BigNumber>;

    start(): Promise<BigNumber>;
  };
}
