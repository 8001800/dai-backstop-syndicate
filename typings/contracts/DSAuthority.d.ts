/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DSAuthorityInterface extends Interface {
  functions: {
    canCall: TypedFunctionDescription<{
      encode([src, dst, sig]: [string, string, Arrayish]): string;
    }>;
  };

  events: {};
}

export class DSAuthority extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DSAuthority;
  attach(addressOrName: string): DSAuthority;
  deployed(): Promise<DSAuthority>;

  on(event: EventFilter | string, listener: Listener): DSAuthority;
  once(event: EventFilter | string, listener: Listener): DSAuthority;
  addListener(eventName: EventFilter | string, listener: Listener): DSAuthority;
  removeAllListeners(eventName: EventFilter | string): DSAuthority;
  removeListener(eventName: any, listener: Listener): DSAuthority;

  interface: DSAuthorityInterface;

  functions: {
    canCall(src: string, dst: string, sig: Arrayish): Promise<boolean>;
  };

  canCall(src: string, dst: string, sig: Arrayish): Promise<boolean>;

  filters: {};

  estimate: {
    canCall(src: string, dst: string, sig: Arrayish): Promise<BigNumber>;
  };
}
