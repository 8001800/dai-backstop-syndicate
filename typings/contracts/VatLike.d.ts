/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface VatLikeInterface extends Interface {
  functions: {
    move: TypedFunctionDescription<{
      encode([, ,]: [string, string, BigNumberish]): string;
    }>;

    suck: TypedFunctionDescription<{
      encode([, ,]: [string, string, BigNumberish]): string;
    }>;
  };

  events: {};
}

export class VatLike extends Contract {
  connect(signerOrProvider: Signer | Provider | string): VatLike;
  attach(addressOrName: string): VatLike;
  deployed(): Promise<VatLike>;

  on(event: EventFilter | string, listener: Listener): VatLike;
  once(event: EventFilter | string, listener: Listener): VatLike;
  addListener(eventName: EventFilter | string, listener: Listener): VatLike;
  removeAllListeners(eventName: EventFilter | string): VatLike;
  removeListener(eventName: any, listener: Listener): VatLike;

  interface: VatLikeInterface;

  functions: {
    move(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    suck(
      arg0: string,
      arg1: string,
      arg2: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;
  };

  move(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  suck(
    arg0: string,
    arg1: string,
    arg2: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  filters: {};

  estimate: {
    move(arg0: string, arg1: string, arg2: BigNumberish): Promise<BigNumber>;

    suck(arg0: string, arg1: string, arg2: BigNumberish): Promise<BigNumber>;
  };
}
