/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface MkrAuthorityInterface extends Interface {
  functions: {
    root: TypedFunctionDescription<{ encode([]: []): string }>;

    wards: TypedFunctionDescription<{ encode([]: [string]): string }>;

    setRoot: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    rely: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    deny: TypedFunctionDescription<{ encode([usr]: [string]): string }>;

    canCall: TypedFunctionDescription<{
      encode([src, , sig]: [string, string, Arrayish]): string;
    }>;
  };

  events: {
    LogDeny: TypedEventDescription<{
      encodeTopics([usr]: [string | null]): string[];
    }>;

    LogRely: TypedEventDescription<{
      encodeTopics([usr]: [string | null]): string[];
    }>;

    LogSetRoot: TypedEventDescription<{
      encodeTopics([newRoot]: [string | null]): string[];
    }>;
  };
}

export class MkrAuthority extends Contract {
  connect(signerOrProvider: Signer | Provider | string): MkrAuthority;
  attach(addressOrName: string): MkrAuthority;
  deployed(): Promise<MkrAuthority>;

  on(event: EventFilter | string, listener: Listener): MkrAuthority;
  once(event: EventFilter | string, listener: Listener): MkrAuthority;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): MkrAuthority;
  removeAllListeners(eventName: EventFilter | string): MkrAuthority;
  removeListener(eventName: any, listener: Listener): MkrAuthority;

  interface: MkrAuthorityInterface;

  functions: {
    root(): Promise<string>;

    wards(arg0: string): Promise<BigNumber>;

    setRoot(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    rely(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    deny(
      usr: string,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    canCall(src: string, arg1: string, sig: Arrayish): Promise<boolean>;
  };

  root(): Promise<string>;

  wards(arg0: string): Promise<BigNumber>;

  setRoot(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  rely(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  deny(
    usr: string,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  canCall(src: string, arg1: string, sig: Arrayish): Promise<boolean>;

  filters: {
    LogDeny(usr: string | null): EventFilter;

    LogRely(usr: string | null): EventFilter;

    LogSetRoot(newRoot: string | null): EventFilter;
  };

  estimate: {
    root(): Promise<BigNumber>;

    wards(arg0: string): Promise<BigNumber>;

    setRoot(usr: string): Promise<BigNumber>;

    rely(usr: string): Promise<BigNumber>;

    deny(usr: string): Promise<BigNumber>;

    canCall(src: string, arg1: string, sig: Arrayish): Promise<BigNumber>;
  };
}
