/* Generated by ts-generator ver. 0.0.8 */
/* tslint:disable */

import { Contract, ContractTransaction, EventFilter, Signer } from "ethers";
import { Listener, Provider } from "ethers/providers";
import { Arrayish, BigNumber, BigNumberish, Interface } from "ethers/utils";
import {
  TransactionOverrides,
  TypedEventDescription,
  TypedFunctionDescription
} from ".";

interface DaiBackstopSyndicateInterface extends Interface {
  functions: {
    allowance: TypedFunctionDescription<{
      encode([owner, spender]: [string, string]): string;
    }>;

    approve: TypedFunctionDescription<{
      encode([spender, value]: [string, BigNumberish]): string;
    }>;

    balanceOf: TypedFunctionDescription<{
      encode([account]: [string]): string;
    }>;

    decreaseAllowance: TypedFunctionDescription<{
      encode([spender, subtractedValue]: [string, BigNumberish]): string;
    }>;

    getAuctionInformation: TypedFunctionDescription<{ encode([]: []): string }>;

    getCurrentBid: TypedFunctionDescription<{
      encode([auctionID]: [BigNumberish]): string;
    }>;

    getDaiAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getFlopperAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getMKRAddress: TypedFunctionDescription<{ encode([]: []): string }>;

    getTotalNumberOfAuctions: TypedFunctionDescription<{
      encode([]: []): string;
    }>;

    increaseAllowance: TypedFunctionDescription<{
      encode([spender, addedValue]: [string, BigNumberish]): string;
    }>;

    isEnabled: TypedFunctionDescription<{ encode([]: []): string }>;

    totalSupply: TypedFunctionDescription<{ encode([]: []): string }>;

    transfer: TypedFunctionDescription<{
      encode([recipient, amount]: [string, BigNumberish]): string;
    }>;

    transferFrom: TypedFunctionDescription<{
      encode([sender, recipient, amount]: [
        string,
        string,
        BigNumberish
      ]): string;
    }>;

    enlist: TypedFunctionDescription<{
      encode([daiAmount]: [BigNumberish]): string;
    }>;

    defect: TypedFunctionDescription<{
      encode([backstopTokenAmount]: [BigNumberish]): string;
    }>;

    enterAuction: TypedFunctionDescription<{
      encode([auctionId]: [BigNumberish]): string;
    }>;

    finalizeAuction: TypedFunctionDescription<{
      encode([auctionId]: [BigNumberish]): string;
    }>;

    getStatus: TypedFunctionDescription<{ encode([]: []): string }>;

    getActiveAuctions: TypedFunctionDescription<{ encode([]: []): string }>;
  };

  events: {
    Approval: TypedEventDescription<{
      encodeTopics([owner, spender, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;

    AuctionEntered: TypedEventDescription<{
      encodeTopics([auctionId, bidder]: [null, null]): string[];
    }>;

    AuctionFinalized: TypedEventDescription<{
      encodeTopics([auctionId, bidder]: [null, null]): string[];
    }>;

    Transfer: TypedEventDescription<{
      encodeTopics([from, to, value]: [
        string | null,
        string | null,
        null
      ]): string[];
    }>;
  };
}

export class DaiBackstopSyndicate extends Contract {
  connect(signerOrProvider: Signer | Provider | string): DaiBackstopSyndicate;
  attach(addressOrName: string): DaiBackstopSyndicate;
  deployed(): Promise<DaiBackstopSyndicate>;

  on(event: EventFilter | string, listener: Listener): DaiBackstopSyndicate;
  once(event: EventFilter | string, listener: Listener): DaiBackstopSyndicate;
  addListener(
    eventName: EventFilter | string,
    listener: Listener
  ): DaiBackstopSyndicate;
  removeAllListeners(eventName: EventFilter | string): DaiBackstopSyndicate;
  removeListener(eventName: any, listener: Listener): DaiBackstopSyndicate;

  interface: DaiBackstopSyndicateInterface;

  functions: {
    allowance(owner: string, spender: string): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    balanceOf(account: string): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getAuctionInformation(): Promise<{
      bidIncrement: BigNumber;
      repriceIncrement: BigNumber;
      bidDuration: BigNumber;
      auctionDuration: BigNumber;
      0: BigNumber;
      1: BigNumber;
      2: BigNumber;
      3: BigNumber;
    }>;

    getCurrentBid(
      auctionID: BigNumberish
    ): Promise<{
      amountDAI: BigNumber;
      amountMKR: BigNumber;
      bidder: string;
      bidDeadline: number;
      auctionDeadline: number;
      0: BigNumber;
      1: BigNumber;
      2: string;
      3: number;
      4: number;
    }>;

    getDaiAddress(): Promise<string>;

    getFlopperAddress(): Promise<string>;

    getMKRAddress(): Promise<string>;

    getTotalNumberOfAuctions(): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    isEnabled(): Promise<boolean>;

    totalSupply(): Promise<BigNumber>;

    transfer(
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enlist(
      daiAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    defect(
      backstopTokenAmount: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    enterAuction(
      auctionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    finalizeAuction(
      auctionId: BigNumberish,
      overrides?: TransactionOverrides
    ): Promise<ContractTransaction>;

    getStatus(): Promise<number>;

    getActiveAuctions(): Promise<BigNumber[]>;
  };

  allowance(owner: string, spender: string): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  balanceOf(account: string): Promise<BigNumber>;

  decreaseAllowance(
    spender: string,
    subtractedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getAuctionInformation(): Promise<{
    bidIncrement: BigNumber;
    repriceIncrement: BigNumber;
    bidDuration: BigNumber;
    auctionDuration: BigNumber;
    0: BigNumber;
    1: BigNumber;
    2: BigNumber;
    3: BigNumber;
  }>;

  getCurrentBid(
    auctionID: BigNumberish
  ): Promise<{
    amountDAI: BigNumber;
    amountMKR: BigNumber;
    bidder: string;
    bidDeadline: number;
    auctionDeadline: number;
    0: BigNumber;
    1: BigNumber;
    2: string;
    3: number;
    4: number;
  }>;

  getDaiAddress(): Promise<string>;

  getFlopperAddress(): Promise<string>;

  getMKRAddress(): Promise<string>;

  getTotalNumberOfAuctions(): Promise<BigNumber>;

  increaseAllowance(
    spender: string,
    addedValue: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  isEnabled(): Promise<boolean>;

  totalSupply(): Promise<BigNumber>;

  transfer(
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  transferFrom(
    sender: string,
    recipient: string,
    amount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enlist(
    daiAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  defect(
    backstopTokenAmount: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  enterAuction(
    auctionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  finalizeAuction(
    auctionId: BigNumberish,
    overrides?: TransactionOverrides
  ): Promise<ContractTransaction>;

  getStatus(): Promise<number>;

  getActiveAuctions(): Promise<BigNumber[]>;

  filters: {
    Approval(
      owner: string | null,
      spender: string | null,
      value: null
    ): EventFilter;

    AuctionEntered(auctionId: null, bidder: null): EventFilter;

    AuctionFinalized(auctionId: null, bidder: null): EventFilter;

    Transfer(from: string | null, to: string | null, value: null): EventFilter;
  };

  estimate: {
    allowance(owner: string, spender: string): Promise<BigNumber>;

    approve(spender: string, value: BigNumberish): Promise<BigNumber>;

    balanceOf(account: string): Promise<BigNumber>;

    decreaseAllowance(
      spender: string,
      subtractedValue: BigNumberish
    ): Promise<BigNumber>;

    getAuctionInformation(): Promise<BigNumber>;

    getCurrentBid(auctionID: BigNumberish): Promise<BigNumber>;

    getDaiAddress(): Promise<BigNumber>;

    getFlopperAddress(): Promise<BigNumber>;

    getMKRAddress(): Promise<BigNumber>;

    getTotalNumberOfAuctions(): Promise<BigNumber>;

    increaseAllowance(
      spender: string,
      addedValue: BigNumberish
    ): Promise<BigNumber>;

    isEnabled(): Promise<BigNumber>;

    totalSupply(): Promise<BigNumber>;

    transfer(recipient: string, amount: BigNumberish): Promise<BigNumber>;

    transferFrom(
      sender: string,
      recipient: string,
      amount: BigNumberish
    ): Promise<BigNumber>;

    enlist(daiAmount: BigNumberish): Promise<BigNumber>;

    defect(backstopTokenAmount: BigNumberish): Promise<BigNumber>;

    enterAuction(auctionId: BigNumberish): Promise<BigNumber>;

    finalizeAuction(auctionId: BigNumberish): Promise<BigNumber>;

    getStatus(): Promise<BigNumber>;

    getActiveAuctions(): Promise<BigNumber>;
  };
}
